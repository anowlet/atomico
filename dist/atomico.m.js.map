{"version":3,"file":"atomico.m.js","sources":["../src/diff/constants.js","../src/diff/dom.js","../src/diff/vdom.js","../src/diff/diff.js","../src/utils.js","../src/index.js"],"sourcesContent":["export const ELEMENT_PREFIX = \"element-\";\r\nexport const ELEMENT_COLLECT = ELEMENT_PREFIX + \"collect\";\r\nexport const ELEMENT_MASTER = ELEMENT_PREFIX + \"master\";\r\nexport const ELEMENT_CONTEXT = ELEMENT_PREFIX + \"context\";\r\n","export function root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nexport function remove(parent, child) {\r\n    root(parent).removeChild(child);\r\n}\r\n\r\nexport function append(parent, child) {\r\n    root(parent).appendChild(child);\r\n}\r\n\r\nexport function replace(parent, newChild, oldChild) {\r\n    root(parent).replaceChild(newChild, oldChild);\r\n}\r\n","/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n * @return {VDom}\r\n */\r\nexport function h(tag, props, ...children) {\r\n    return new VDom(tag, props, concat(children));\r\n}\r\n/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n */\r\n\r\nexport class VDom {\r\n    constructor(tag, props, children) {\r\n        this.tag = tag;\r\n        this.props = props || {};\r\n        this.children = children || [];\r\n    }\r\n    clone(tag = this.tag, props = this.props, children = this.children) {\r\n        return new VDom(tag, { ...props }, children);\r\n    }\r\n}\r\nexport function isDom(tag) {\r\n    return tag !== null && typeof tag === \"object\" && tag.nodeType !== 11\r\n        ? true\r\n        : false;\r\n}\r\n/**\r\n *\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nexport function isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * prepares the children associated with virtual dom, managing to simplify the algorithm of diff\r\n * @param {*} children - list of children associated with the virtual dom\r\n * @param {*} merge - array that concatenates all the children independent of the depth of the array\r\n * @return {Array}\r\n */\r\nexport function concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(\r\n                  isVDom(child) ? child : new VDom(\"\", {}, [child || \"\"])\r\n              );\r\n    }\r\n    return merge;\r\n}\r\n","import { ELEMENT_MASTER, ELEMENT_COLLECT, ELEMENT_CONTEXT } from \"./constants\";\r\nimport { remove, append, replace } from \"./dom\";\r\nimport { VDom, h, isDom } from \"./vdom\";\r\n/**\r\n * Analyze if prev Node has or does not have a state defined by the diff process,\r\n * this is left linked to the node to avoid its loss either by external editing.\r\n *\r\n * @param {HTMLELement} [parent] - If the father is defined, the remove function is activated,\r\n *                                 it allows to remove the nodes from the father\r\n * @param {HTMLELement} [prevNode] - Node that can possess the previous state\r\n * @param {Object} next - Next render state\r\n * @param {Object} slots - Group the slots to be retrieved by the special slot tag\r\n * @param {*} context - allows to share information within the children of the component\r\n * @param {Boolean} svg - define if the html element is a svg\r\n * @return {HTMLELement} - returns the current node.\r\n */\r\nexport function diff(parent, prevNode, next, slots = {}, context, isSvg) {\r\n    let branch = (prevNode && prevNode[ELEMENT_MASTER]) || new Map(),\r\n        prev = branch.get(parent) || new VDom(),\r\n        nextNode = prevNode,\r\n        nextMaster = next;\r\n\r\n    if (next) {\r\n        let isSlot = next.tag === \"slot\";\r\n\r\n        next = slot(next, slots);\r\n        prev = slot(prev, slots);\r\n\r\n        isSvg = isSvg || next.tag === \"svg\";\r\n\r\n        if (parent) {\r\n            if (prev.tag !== next.tag) {\r\n                nextNode = isDom(next.tag)\r\n                    ? next.tag\r\n                    : next.tag\r\n                        ? isSvg\r\n                            ? document.createElementNS(\r\n                                  \"http://www.w3.org/2000/svg\",\r\n                                  next.tag\r\n                              )\r\n                            : document.createElement(next.tag)\r\n                        : document.createTextNode(\"\");\r\n                if (prevNode) {\r\n                    replace(parent, nextNode, prevNode);\r\n                    while (!isSlot && !next.collect && prevNode.firstChild) {\r\n                        append(nextNode, prevNode.firstChild);\r\n                    }\r\n                } else {\r\n                    append(parent, nextNode);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (nextNode.nodeType === 3) {\r\n            if (prev.children[0] !== next.children[0])\r\n                nextNode.textContent = next.children[0];\r\n        } else {\r\n            if (nextNode && nextNode[ELEMENT_CONTEXT]) {\r\n                context = nextNode[ELEMENT_CONTEXT](context);\r\n            }\r\n            let collect = (parent && nextNode[ELEMENT_COLLECT]) || {},\r\n                props = diffProps(\r\n                    nextNode,\r\n                    next.tag === prev.tag ? prev.props : {},\r\n                    next.props,\r\n                    isSvg,\r\n                    /**\r\n                     * It allows to obtain properties of the iteration of diff by properties\r\n                     */\r\n                    collect.props\r\n                );\r\n            if (collect.handler) {\r\n                props.children = next.children.map(\r\n                    vdom => (vdom.tag ? vdom : vdom.children[0])\r\n                );\r\n                collect.handler(props);\r\n            } else {\r\n                if (!isSlot && nextNode) {\r\n                    let children = Array.from(\r\n                            (nextNode.shadowRoot || nextNode).childNodes\r\n                        ),\r\n                        length = Math.max(\r\n                            children.length,\r\n                            next.children.length\r\n                        );\r\n                    for (let i = 0; i < length; i++) {\r\n                        diff(\r\n                            nextNode,\r\n                            children[i],\r\n                            next.children[i],\r\n                            slots,\r\n                            context,\r\n                            isSvg\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        if (parent && prevNode) {\r\n            remove(parent, prevNode);\r\n        }\r\n    }\r\n    nextNode[ELEMENT_MASTER] = branch.set(parent, nextMaster);\r\n    return nextNode;\r\n}\r\n\r\nexport function Collect(node, props, handler) {\r\n    this.observer = node[ELEMENT_COLLECT] = { props, handler };\r\n}\r\n\r\nexport function Context(node, handler, prop = \"context\") {\r\n    node[ELEMENT_CONTEXT] = context => {\r\n        return (node[prop] = handler(context) || context);\r\n    };\r\n}\r\n\r\n/**\r\n * compares the attributes associated with the 2 render states\r\n * @param {HTMLELement} node\r\n * @param {Object} prev - properties that the node already has\r\n * @param {Object} next - object with the new properties to define the node\r\n * @param {Boolean} [svg] - define if the html element is a svg\r\n * @param {Object} [collect] -It allows to recover properties, avoiding in turn the analysis\r\n *                            of these on the node, these are returned in an object in association\r\n *                            with the key of the loop\r\n * @param {Boolean} [nextMerge] - it allows not to eliminate the properties of the previous state and add them to the next state\r\n * @return {Object} Collected properties\r\n */\r\nfunction diffProps(node, prev, next, isSvg, collect) {\r\n    // generates a list of the existing attributes in both versions\r\n    let keys = Object.keys(prev).concat(Object.keys(next)),\r\n        length = keys.length,\r\n        props = {};\r\n    for (let i = 0; i < length; i++) {\r\n        let prop = keys[i];\r\n\r\n        if (isSvg && prop === \"xmlns\") continue;\r\n        if (prev[prop] !== next[prop]) {\r\n            if (collect && collect.indexOf(prop) > -1) {\r\n                props[prop] = next[prop];\r\n                continue;\r\n            }\r\n\r\n            let isFnNext = typeof next[prop] === \"function\",\r\n                isFnPrev = typeof prev[prop] === \"function\";\r\n\r\n            if (isFnNext || isFnPrev) {\r\n                if (isFnPrev) node.removeEventListener(prop, prev[prop]);\r\n                if (isFnNext) node.addEventListener(prop, next[prop]);\r\n            } else if (prop in next) {\r\n                if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                    if (prop === \"style\") {\r\n                        if (typeof next[prop] === \"object\") {\r\n                            let prevStyle = prev[prop] || {},\r\n                                nextStyle = next[prop];\r\n                            for (let prop in nextStyle) {\r\n                                if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                    if (prop[0] === \"-\") {\r\n                                        node.setProperty(prop, nextStyle[prop]);\r\n                                    } else {\r\n                                        node.style[prop] = nextStyle[prop];\r\n                                    }\r\n                                }\r\n                            }\r\n                            next[prop] = { ...prevStyle, ...nextStyle };\r\n                        } else {\r\n                            node.style.cssText = next[prop];\r\n                        }\r\n                    } else {\r\n                        node[prop] = next[prop];\r\n                    }\r\n                } else {\r\n                    isSvg\r\n                        ? node.setAttributeNS(null, prop, next[prop])\r\n                        : node.setAttribute(prop, next[prop]);\r\n                }\r\n            } else {\r\n                if (collect) {\r\n                    next[prop] = prev[prop];\r\n                } else {\r\n                    node.removeAttribute(prop);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}\r\n/**\r\n *\r\n * @param {VDom} vdom - It allows to identify if this node requires the use of a slot\r\n * @param {Object} slots - Object that has living nodes associated by an index\r\n */\r\nfunction slot(vdom, slots) {\r\n    if (vdom.tag === \"slot\") {\r\n        vdom = vdom.clone(slots[vdom.props.name] || \"\");\r\n        delete vdom.props.name;\r\n        return vdom;\r\n    }\r\n    return vdom;\r\n}\r\n","export function camelCase(string) {\r\n    return string.replace(/-+([\\w])/g, (all, letter) => letter.toUpperCase());\r\n}\r\n\r\nexport function defer(handler) {\r\n    return Promise.resolve().then(handler);\r\n}\r\n\r\nexport function getProps(props) {\r\n    let isArray = Array.isArray(props);\r\n    return {\r\n        keys: (isArray ? props : Object.keys(props)).concat(\"children\"),\r\n        types: isArray ? {} : props\r\n    };\r\n}\r\n","import { h, diff, isVDom, Collect, Context } from \"./diff\";\r\nimport { getProps, defer, camelCase } from \"./utils\";\r\n\r\nexport { h } from \"./diff\";\r\n\r\nexport class Element extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.props = {};\r\n        this.slots = {};\r\n        this.state = {};\r\n        this.preventRender = true;\r\n        this.is = this.nodeName.toLocaleLowerCase();\r\n        this._props = getProps(this.constructor.props);\r\n        new Collect(this, this._props.keys, props => this.setProperties(props));\r\n        new Context(this, context => this.getContext(context));\r\n    }\r\n    get content() {\r\n        return this.shadowRoot || this;\r\n    }\r\n    static get props() {\r\n        return [];\r\n    }\r\n    static get observedAttributes() {\r\n        return getProps(this.props).keys;\r\n    }\r\n    setAttribute(prop, value) {\r\n        if (this._props.keys.indexOf(prop) > -1) {\r\n            this.setProperties({ [prop]: value });\r\n        } else {\r\n            super.setAttribute(prop, value);\r\n        }\r\n    }\r\n    setProperties(props) {\r\n        let nextProps = {},\r\n            prevent = this.isMounted;\r\n        for (let prop in props) {\r\n            let type = this._props.types[prop],\r\n                value = props[prop],\r\n                index;\r\n            value = type ? type(value) : value;\r\n            index = camelCase(prop);\r\n            if (value !== this.props[index]) {\r\n                nextProps[index] = value;\r\n            }\r\n        }\r\n        if (Object.keys(nextProps).length) {\r\n            if (prevent) prevent = this.onUpdate(nextProps) !== false;\r\n            this.props = { ...this.props, ...nextProps };\r\n            if (prevent) this.setState({});\r\n        }\r\n    }\r\n    setState(state, watch) {\r\n        if (typeof state !== \"object\") return;\r\n        this.state = { ...this.state, ...state };\r\n        if (this.preventRender) return;\r\n        this.preventRender = true;\r\n        defer(() => {\r\n            let render = this.render();\r\n            render =\r\n                isVDom(render) && render.tag === \"host\"\r\n                    ? render\r\n                    : h(\"host\", {}, render);\r\n\r\n            diff(false, this, render.clone(this.is), this.slots, this.context);\r\n            this.preventRender = false;\r\n            watch ? watch() : this.onUpdated();\r\n        });\r\n    }\r\n    connectedCallback() {\r\n        defer(() => {\r\n            let fragment = document.createDocumentFragment();\r\n            while (this.firstChild) {\r\n                let child = this.firstChild,\r\n                    slot = child.getAttribute && child.getAttribute(\"slot\");\r\n                if (slot) {\r\n                    this.slots[slot] = child;\r\n                }\r\n                fragment.appendChild(child);\r\n            }\r\n            this.preventRender = false;\r\n            this.setState({}, () => {\r\n                this.isMounted = true;\r\n                this.onMounted();\r\n            });\r\n        });\r\n    }\r\n    disconnectedCallback() {\r\n        this.onUnmounted();\r\n    }\r\n    attributeChangedCallback(index, prev, next) {\r\n        if (prev !== next) this.setProperties({ [index]: next });\r\n    }\r\n    dispatch(type, detail) {\r\n        this.dispatchEvent(new CustomEvent(type, { detail }));\r\n    }\r\n    getContext() {}\r\n    onMounted() {}\r\n    onUpdate() {}\r\n    onUnmounted() {}\r\n    onUpdated() {}\r\n    render() {}\r\n}\r\n"],"names":["ELEMENT_PREFIX","ELEMENT_COLLECT","ELEMENT_MASTER","ELEMENT_CONTEXT","root","parent","shadowRoot","remove","child","removeChild","append","appendChild","replace","newChild","oldChild","replaceChild","h","tag","props","children","VDom","concat","constructor","clone","this","isDom","nodeType","isVDom","value","merge","i","length","Array","isArray","push","diff","prevNode","next","slots","context","isSvg","branch","Map","prev","get","nextNode","nextMaster","isSlot","slot","document","createElementNS","createElement","createTextNode","collect","firstChild","textContent","diffProps","handler","map","vdom","from","childNodes","Math","max","set","Collect","node","observer","Context","prop","keys","Object","indexOf","isFnNext","isFnPrev","removeEventListener","addEventListener","prevStyle","nextStyle","setProperty","style","cssText","setAttributeNS","setAttribute","removeAttribute","name","camelCase","string","all","letter","toUpperCase","defer","Promise","resolve","then","getProps","types","Element","HTMLElement","state","preventRender","is","nodeName","toLocaleLowerCase","_props","setProperties","getContext","nextProps","prevent","isMounted","index","type","onUpdate","setState","watch","render","onUpdated","connectedCallback","fragment","createDocumentFragment","getAttribute","onMounted","disconnectedCallback","onUnmounted","attributeChangedCallback","dispatch","detail","dispatchEvent","CustomEvent"],"mappings":"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"}