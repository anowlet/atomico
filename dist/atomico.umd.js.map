{"version":3,"file":"atomico.umd.js","sources":["../node_modules/atomico-diff/dist/atomico-diff.m.js","../src/utils.js","../src/index.js"],"sourcesContent":["const ELEMENT_PREFIX = \"element-\";\r\nconst ELEMENT_COLLECT = ELEMENT_PREFIX + \"collect\";\r\nconst ELEMENT_MASTER = ELEMENT_PREFIX + \"master\";\r\nconst ELEMENT_CONTEXT = ELEMENT_PREFIX + \"context\";\n\nfunction root(parent) {\r\n    return parent.shadowRoot || parent;\r\n}\r\nfunction remove(parent, child) {\r\n    root(parent).removeChild(child);\r\n}\r\n\r\nfunction append(parent, child) {\r\n    root(parent).appendChild(child);\r\n}\r\n\r\nfunction replace(parent, newChild, oldChild) {\r\n    root(parent).replaceChild(newChild, oldChild);\r\n}\n\n/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n * @return {VDom}\r\n */\r\nfunction h(tag, props, ...children) {\r\n    return new VDom(tag, props, concat(children));\r\n}\r\n/**\r\n * Create an instance of a virtual node\r\n * @param {*} tag - be social to the tagName\r\n * @param {*} props - is associated with the attributes of the tag\r\n * @param  {...*} children - the children associated with the tag\r\n */\r\n\r\nclass VDom {\r\n    constructor(tag, props, children) {\r\n        this.tag = tag;\r\n        this.props = props || {};\r\n        this.children = children || [];\r\n    }\r\n    clone(tag = this.tag, props = this.props, children = this.children) {\r\n        return new VDom(tag, { ...props }, children);\r\n    }\r\n}\r\nfunction isDom(tag) {\r\n    return tag !== null && typeof tag === \"object\" && tag.nodeType !== 11\r\n        ? true\r\n        : false;\r\n}\r\n/**\r\n *\r\n * @param {*} value\r\n * @return {Boolean}\r\n */\r\nfunction isVDom(value) {\r\n    return typeof value === \"object\" && value instanceof VDom;\r\n}\r\n/**\r\n * prepares the children associated with virtual dom, managing to simplify the algorithm of diff\r\n * @param {*} children - list of children associated with the virtual dom\r\n * @param {*} merge - array that concatenates all the children independent of the depth of the array\r\n * @return {Array}\r\n */\r\nfunction concat(children, merge = []) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        let child = children[i];\r\n        Array.isArray(child)\r\n            ? concat(child, merge)\r\n            : merge.push(\r\n                  isVDom(child) ? child : new VDom(\"\", {}, [child || \"\"])\r\n              );\r\n    }\r\n    return merge;\r\n}\n\n/**\r\n * Analyze if prev Node has or does not have a state defined by the diff process,\r\n * this is left linked to the node to avoid its loss either by external editing.\r\n *\r\n * @param {HTMLELement} [parent] - If the father is defined, the remove function is activated,\r\n *                                 it allows to remove the nodes from the father\r\n * @param {HTMLELement} [prevNode] - Node that can possess the previous state\r\n * @param {Object} next - Next render state\r\n * @param {Object} slots - Group the slots to be retrieved by the special slot tag\r\n * @param {*} context - allows to share information within the children of the component\r\n * @param {Boolean} svg - define if the html element is a svg\r\n * @return {HTMLELement} - returns the current node.\r\n */\r\nfunction diff(parent, prevNode, next, slots = {}, context, isSvg) {\r\n    let branch = (prevNode && prevNode[ELEMENT_MASTER]) || new Map(),\r\n        prev = branch.get(parent) || new VDom(),\r\n        nextNode = prevNode,\r\n        nextMaster = next;\r\n\r\n    if (next) {\r\n        let isSlot = next.tag === \"slot\";\r\n\r\n        next = slot(next, slots);\r\n        prev = slot(prev, slots);\r\n\r\n        isSvg = isSvg || next.tag === \"svg\";\r\n\r\n        if (parent) {\r\n            if (prev.tag !== next.tag) {\r\n                nextNode = isDom(next.tag)\r\n                    ? next.tag\r\n                    : next.tag\r\n                        ? isSvg\r\n                            ? document.createElementNS(\r\n                                  \"http://www.w3.org/2000/svg\",\r\n                                  next.tag\r\n                              )\r\n                            : document.createElement(next.tag)\r\n                        : document.createTextNode(\"\");\r\n                if (prevNode) {\r\n                    replace(parent, nextNode, prevNode);\r\n                    while (!isSlot && !next.collect && prevNode.firstChild) {\r\n                        append(nextNode, prevNode.firstChild);\r\n                    }\r\n                } else {\r\n                    append(parent, nextNode);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (nextNode.nodeType === 3) {\r\n            if (prev.children[0] !== next.children[0])\r\n                nextNode.textContent = next.children[0];\r\n        } else {\r\n            if (nextNode && nextNode[ELEMENT_CONTEXT]) {\r\n                context = nextNode[ELEMENT_CONTEXT](context);\r\n            }\r\n            let collect = (parent && nextNode[ELEMENT_COLLECT]) || {},\r\n                props = diffProps(\r\n                    nextNode,\r\n                    next.tag === prev.tag ? prev.props : {},\r\n                    next.props,\r\n                    isSvg,\r\n                    /**\r\n                     * It allows to obtain properties of the iteration of diff by properties\r\n                     */\r\n                    collect.props\r\n                );\r\n            if (collect.handler) {\r\n                props.children = next.children.map(\r\n                    vdom => (vdom.tag ? vdom : vdom.children[0])\r\n                );\r\n                collect.handler(props);\r\n            } else {\r\n                if (!isSlot && nextNode) {\r\n                    let children = Array.from(\r\n                            (nextNode.shadowRoot || nextNode).childNodes\r\n                        ),\r\n                        length = Math.max(\r\n                            children.length,\r\n                            next.children.length\r\n                        );\r\n                    for (let i = 0; i < length; i++) {\r\n                        diff(\r\n                            nextNode,\r\n                            children[i],\r\n                            next.children[i],\r\n                            slots,\r\n                            context,\r\n                            isSvg\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        if (parent && prevNode) {\r\n            remove(parent, prevNode);\r\n        }\r\n    }\r\n    nextNode[ELEMENT_MASTER] = branch.set(parent, nextMaster);\r\n    return nextNode;\r\n}\r\n\r\nfunction Collect(node, props, handler) {\r\n    this.observer = node[ELEMENT_COLLECT] = { props, handler };\r\n}\r\n\r\nfunction Context(node, handler, prop = \"context\") {\r\n    node[ELEMENT_CONTEXT] = context => {\r\n        return (node[prop] = handler(context) || context);\r\n    };\r\n}\r\n\r\n/**\r\n * compares the attributes associated with the 2 render states\r\n * @param {HTMLELement} node\r\n * @param {Object} prev - properties that the node already has\r\n * @param {Object} next - object with the new properties to define the node\r\n * @param {Boolean} [svg] - define if the html element is a svg\r\n * @param {Object} [collect] -It allows to recover properties, avoiding in turn the analysis\r\n *                            of these on the node, these are returned in an object in association\r\n *                            with the key of the loop\r\n * @param {Boolean} [nextMerge] - it allows not to eliminate the properties of the previous state and add them to the next state\r\n * @return {Object} Collected properties\r\n */\r\nfunction diffProps(node, prev, next, isSvg, collect) {\r\n    // generates a list of the existing attributes in both versions\r\n    let keys = Object.keys(prev).concat(Object.keys(next)),\r\n        length = keys.length,\r\n        props = {};\r\n    for (let i = 0; i < length; i++) {\r\n        let prop = keys[i];\r\n\r\n        if (isSvg && prop === \"xmlns\") continue;\r\n        if (prev[prop] !== next[prop]) {\r\n            if (collect && collect.indexOf(prop) > -1) {\r\n                props[prop] = next[prop];\r\n                continue;\r\n            }\r\n\r\n            let isFnNext = typeof next[prop] === \"function\",\r\n                isFnPrev = typeof prev[prop] === \"function\";\r\n\r\n            if (isFnNext || isFnPrev) {\r\n                if (isFnPrev) node.removeEventListener(prop, prev[prop]);\r\n                if (isFnNext) node.addEventListener(prop, next[prop]);\r\n            } else if (prop in next) {\r\n                if ((prop in node && !isSvg) || (isSvg && prop === \"style\")) {\r\n                    if (prop === \"style\") {\r\n                        if (typeof next[prop] === \"object\") {\r\n                            let prevStyle = prev[prop] || {},\r\n                                nextStyle = next[prop];\r\n                            for (let prop in nextStyle) {\r\n                                if (prevStyle[prop] !== nextStyle[prop]) {\r\n                                    if (prop[0] === \"-\") {\r\n                                        node.setProperty(prop, nextStyle[prop]);\r\n                                    } else {\r\n                                        node.style[prop] = nextStyle[prop];\r\n                                    }\r\n                                }\r\n                            }\r\n                            next[prop] = { ...prevStyle, ...nextStyle };\r\n                        } else {\r\n                            node.style.cssText = next[prop];\r\n                        }\r\n                    } else {\r\n                        node[prop] = next[prop];\r\n                    }\r\n                } else {\r\n                    isSvg\r\n                        ? node.setAttributeNS(null, prop, next[prop])\r\n                        : node.setAttribute(prop, next[prop]);\r\n                }\r\n            } else {\r\n                if (collect) {\r\n                    next[prop] = prev[prop];\r\n                } else {\r\n                    node.removeAttribute(prop);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return props;\r\n}\r\n/**\r\n *\r\n * @param {VDom} vdom - It allows to identify if this node requires the use of a slot\r\n * @param {Object} slots - Object that has living nodes associated by an index\r\n */\r\nfunction slot(vdom, slots) {\r\n    if (vdom.tag === \"slot\") {\r\n        vdom = vdom.clone(slots[vdom.props.name] || \"\");\r\n        delete vdom.props.name;\r\n        return vdom;\r\n    }\r\n    return vdom;\r\n}\n\nexport { diff, Collect, Context, h, isVDom };\n//# sourceMappingURL=atomico-diff.m.js.map\n","export function camelCase(string) {\r\n    return string.replace(/-+([\\w])/g, (all, letter) => letter.toUpperCase());\r\n}\r\n\r\nexport function defer(handler) {\r\n    return Promise.resolve().then(handler);\r\n}\r\n\r\nexport function getProps(props) {\r\n    let isArray = Array.isArray(props);\r\n    return {\r\n        keys: (isArray ? props : Object.keys(props)).concat(\"children\"),\r\n        types: isArray ? {} : props\r\n    };\r\n}\r\n","import { h, diff, isVDom, Collect, Context } from \"atomico-diff\";\r\nimport { getProps, defer, camelCase } from \"./utils\";\r\n\r\nexport { h } from \"atomico-diff\";\r\n\r\nexport class Element extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.props = {};\r\n        this.slots = {};\r\n        this.state = {};\r\n        this.preventRender = true;\r\n        this.is = this.nodeName.toLocaleLowerCase();\r\n        this._props = getProps(this.constructor.props);\r\n        new Collect(this, this._props.keys, props => this.setProperties(props));\r\n        new Context(this, context => this.getContext(context));\r\n    }\r\n    get content() {\r\n        return this.shadowRoot || this;\r\n    }\r\n    static get props() {\r\n        return [];\r\n    }\r\n    static get observedAttributes() {\r\n        return getProps(this.props).keys;\r\n    }\r\n    setAttribute(prop, value) {\r\n        if (this._props.keys.indexOf(prop) > -1) {\r\n            this.setProperties({ [prop]: value });\r\n        } else {\r\n            super.setAttribute(prop, value);\r\n        }\r\n    }\r\n    setProperties(props) {\r\n        let nextProps = {},\r\n            prevent = this.isMounted;\r\n        for (let prop in props) {\r\n            let type = this._props.types[prop],\r\n                value = props[prop],\r\n                index;\r\n            value = type ? type(value) : value;\r\n            index = camelCase(prop);\r\n            if (value !== this.props[index]) {\r\n                nextProps[index] = value;\r\n            }\r\n        }\r\n        if (Object.keys(nextProps).length) {\r\n            if (prevent) prevent = this.onUpdate(nextProps) !== false;\r\n            this.props = { ...this.props, ...nextProps };\r\n            if (prevent) this.setState({});\r\n        }\r\n    }\r\n    setState(state, watch) {\r\n        if (typeof state !== \"object\") return;\r\n        this.state = { ...this.state, ...state };\r\n        if (this.preventRender) return;\r\n        this.preventRender = true;\r\n        defer(() => {\r\n            let render = this.render();\r\n            render =\r\n                isVDom(render) && render.tag === \"host\"\r\n                    ? render\r\n                    : h(\"host\", {}, render);\r\n\r\n            diff(false, this, render.clone(this.is), this.slots, this.context);\r\n            this.preventRender = false;\r\n            watch ? watch() : this.onUpdated();\r\n        });\r\n    }\r\n    connectedCallback() {\r\n        defer(() => {\r\n            let fragment = document.createDocumentFragment();\r\n            while (this.firstChild) {\r\n                let child = this.firstChild,\r\n                    slot = child.getAttribute && child.getAttribute(\"slot\");\r\n                if (slot) {\r\n                    this.slots[slot] = child;\r\n                }\r\n                fragment.appendChild(child);\r\n            }\r\n            this.preventRender = false;\r\n            this.setState({}, () => {\r\n                this.isMounted = true;\r\n                this.onMounted();\r\n            });\r\n        });\r\n    }\r\n    disconnectedCallback() {\r\n        this.onUnmounted();\r\n    }\r\n    attributeChangedCallback(index, prev, next) {\r\n        if (prev !== next) this.setProperties({ [index]: next });\r\n    }\r\n    dispatch(type, detail) {\r\n        this.dispatchEvent(new CustomEvent(type, { detail }));\r\n    }\r\n    getContext() {}\r\n    onMounted() {}\r\n    onUpdate() {}\r\n    onUnmounted() {}\r\n    onUpdated() {}\r\n    render() {}\r\n}\r\n"],"names":["ELEMENT_COLLECT","ELEMENT_PREFIX","ELEMENT_MASTER","ELEMENT_CONTEXT","defer","handler","Promise","resolve","then","getProps","props","isArray","Array","keys","Object","concat","types","HTMLElement","constructor","slots","state","preventRender","is","this","nodeName","toLocaleLowerCase","_props","Collect","setProperties","Context","context","getContext","shadowRoot","setAttribute","prop","value","indexOf","nextProps","prevent","isMounted","index","type","replace","all","letter","toUpperCase","length","onUpdate","setState","watch","render","diff","isVDom","tag","h","clone","onUpdated","connectedCallback","fragment","document","createDocumentFragment","firstChild","child","slot","getAttribute","appendChild","onMounted","disconnectedCallback","onUnmounted","attributeChangedCallback","prev","next","dispatch","detail","dispatchEvent","CustomEvent"],"mappings":"0LAAO,MACMA,EAAkBC,kBAClBC,EAAiBD,iBACjBE,EAAkBF,owECCxB,SAASG,EAAMC,UACXC,QAAQC,UAAUC,KAAKH,GAG3B,SAASI,EAASC,OACjBC,EAAUC,MAAMD,QAAQD,SACrB,CACHG,MAAOF,EAAUD,EAAQI,OAAOD,KAAKH,IAAQK,OAAO,YACpDC,MAAOL,EAAU,GAAKD,aCPvB,cAAsBO,YACzBC,2BAESR,MAAQ,QACRS,MAAQ,QACRC,MAAQ,QACRC,eAAgB,OAChBC,GAAKC,KAAKC,SAASC,yBACnBC,OAASjB,EAASc,KAAKL,YAAYR,WACpCiB,EAAQJ,KAAMA,KAAKG,OAAOb,KAAMH,GAASa,KAAKK,cAAclB,QAC5DmB,EAAQN,KAAMO,GAAWP,KAAKQ,WAAWD,yBAGtCP,KAAKS,YAAcT,8BAGnB,0CAGAd,EAASc,KAAKb,OAAOG,KAEhCoB,aAAaC,EAAMC,GACXZ,KAAKG,OAAOb,KAAKuB,QAAQF,IAAS,OAC7BN,cAAc,EAAGM,GAAOC,UAEvBF,aAAaC,EAAMC,GAGjCP,cAAclB,OACN2B,EAAY,GACZC,EAAUf,KAAKgB,cACd,IAAIL,KAAQxB,EAAO,KAGhB8B,EAFAC,EAAOlB,KAAKG,OAAOV,MAAMkB,GACzBC,EAAQzB,EAAMwB,GAElBC,EAAQM,EAAOA,EAAKN,GAASA,EAC7BK,EAAkBN,EDxCZQ,QAAQ,YAAa,CAACC,EAAKC,IAAWA,EAAOC,eCyC/CV,IAAUZ,KAAKb,MAAM8B,KACrBH,EAAUG,GAASL,GAGvBrB,OAAOD,KAAKwB,GAAWS,SACnBR,IAASA,GAAuC,IAA7Bf,KAAKwB,SAASV,SAChC3B,uBAAaa,KAAKb,MAAU2B,GAC7BC,GAASf,KAAKyB,SAAS,KAGnCA,SAAS5B,EAAO6B,GACS,iBAAV7B,SACNA,uBAAaG,KAAKH,MAAUA,GAC7BG,KAAKF,qBACJA,eAAgB,EACrBjB,EAAM,SACE8C,EAAS3B,KAAK2B,SAMlBC,GAAK,EAAO5B,MALZ2B,EACIE,EAAOF,IAA0B,SAAfA,EAAOG,IACnBH,EACAI,EAAE,OAAQ,GAAIJ,IAECK,MAAMhC,KAAKD,IAAKC,KAAKJ,MAAOI,KAAKO,cACrDT,eAAgB,EACrB4B,EAAQA,IAAU1B,KAAKiC,gBAG/BC,oBACIrD,EAAM,SACEsD,EAAWC,SAASC,8BACjBrC,KAAKsC,YAAY,KAChBC,EAAQvC,KAAKsC,WACbE,EAAOD,EAAME,cAAgBF,EAAME,aAAa,QAChDD,SACK5C,MAAM4C,GAAQD,GAEvBJ,EAASO,YAAYH,QAEpBzC,eAAgB,OAChB2B,SAAS,GAAI,UACTT,WAAY,OACZ2B,gBAIjBC,4BACSC,cAETC,yBAAyB7B,EAAO8B,EAAMC,GAC9BD,IAASC,GAAMhD,KAAKK,cAAc,EAAGY,GAAQ+B,IAErDC,SAAS/B,EAAMgC,QACNC,cAAc,IAAIC,YAAYlC,EAAM,CAAEgC,OAAAA,KAE/C1C,cACAmC,aACAnB,YACAqB,eACAZ,aACAN"}